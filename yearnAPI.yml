swagger: '2.0'
info:
  description: Yearn API
  version: '2021-01-25T23:15:19Z'
  title: prod-yearn
host: api.yearn.tools
tags:
  - name: Vaults
    description: Vault endpoints
  - name: User
    description: User endpoints (these APIs are specific to a user account)
  - name: Loanscan
    description: Loanscan endpoints (not for general consumption)
  - name: Yearn
    description: Yearn organization endpoints
schemes:
  - https
paths:
  /loanscan/crvbtc:
    get:
      tags:
        - Loanscan
      summary: Gets crvBTC vault APY aggregated with Curve pool APY
      description: |
        crvBTC APY is an aggregate APY. This API combines vault APY with underlying Curve pool APY. Aggregation formula: ((1 + poolApy) * (1 + vaultApy) - 1) * 100;
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-loanscan-crvbtc/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /loanscan/crvbusd:
    get:
      tags:
        - Loanscan
      summary: Gets crvBUSD vault APY aggregated with Curve pool APY
      description: |
        crvBUSD APY is an aggregate APY. This API combines vault APY with underlying Curve pool APY. Aggregation formula: ((1 + poolApy) * (1 + vaultApy) - 1) * 100;
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-loanscan-crvbusd/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /loanscan/ethstable:
    get:
      tags:
        - Loanscan
      summary: Gets stablecoin vault APYs and ETH vault APY
      description: |
        APY for following vaults: ETH, USDC, USDT, TUSD, DAI
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-loanscan-eth-stable/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /loanscan/link:
    get:
      tags:
        - Loanscan
      summary: Gets LINK vault APY
      description: |
        LINK APY actually comes from the aLINK vault. aLINK vault cannot be relied on directly due to use of insurance
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-loanscan-link/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /loanscan/ycrv:
    get:
      tags:
        - Loanscan
      summary: Gets yCrv vault APY aggregated with Curve pool APY
      description: |
        yCrv APY is an aggregate APY. This API combines vault APY with underlying Curve pool APY. Aggregation formula: ((1 + poolApy) * (1 + vaultApy) - 1) * 100;
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-loanscan-ycrv/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /tvl:
    get:
      tags:
        - TVL
      summary: fetches from DB the TVL.
      description: |
        If param ?historic=true is passed, then all TVLs are delivered, if not, then only last TVL is delivered.
      parameters:
        - name: historic
          in: query
          description: 'if true, then the full historic TVL values from DB are delivered'
          required: false
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-tvl/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  '/user/{userAddress}/vaults':
    get:
      tags:
        - User
      summary: Gets all vaults a user has interacted with
      description: |
        Optionally include vault statistics and transactions per user. Valid query param values are "true" and "false"
      parameters:
        - name: showall
          in: query
          description: Inclue all vaults (including vaults the user has not interacted with)
          required: false
          type: string
        - name: userAddress
          in: path
          description: 'User account address. Format: 0x{...}'
          required: true
          type: string
        - name: apy
          in: query
          description: Include vault APY
          required: false
          type: string
        - name: statistics
          in: query
          description: 'Include user vault statistics (deposits, withdraws, transfers)'
          required: false
          type: string
        - name: transactions
          in: query
          description: Include user vault transactions
          required: false
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-user-vaults/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  '/user/{userAddress}/vaults/earnings':
    get:
      parameters:
        - name: userAddress
          in: path
          description: 'User account address. Format: 0x{...}'
          required: true
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-user-vaults-earnings/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  '/user/{userAddress}/vaults/statistics':
    get:
      tags:
        - User
      summary: 'Gets vault statistics assocaited with a user. Total earnings, deposits, withdrawals, transfers.'
      description: |
        Currently earnings include token transfer events (such as zaps). This should be configurable in the future. Statistics come from the Yearn subgraph.
      parameters:
        - name: userAddress
          in: path
          description: 'User account address. Format: 0x{...}'
          required: true
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-user-vaults-statistics/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  '/user/{userAddress}/vaults/transactions':
    get:
      tags:
        - User
      summary: 'Gets all user transactions per vault (deposits, withdraws, transferIn, transferOut)'
      description: |
        Includes amount/shares, calculated by tracing the Yearn vault contract methods. Transactions come from the Yearn subgraph.
      parameters:
        - name: userAddress
          in: path
          description: 'User account address. Format: 0x{...}'
          required: true
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-user-vaults-transactions/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /vaults:
    get:
      tags:
        - Vaults
      summary: Gets all vaults from the vault registry
      description: 'Vaults are pulled from the vault registry (https://etherscan.io/address/0x3ee41c098f9666ed2ea246f4d2558010e59d63a0). Includes controller/strategy info. Updates once an hour.'
      parameters:
        - name: apy
          in: query
          description: Include vault APY
          required: false
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-vaults/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /vaults/addresses:
    get:
      tags:
        - Vaults
      summary: Gets all vault addresses from the vault registry
      description: |
        Vault addresses are pulled from the vault registry (https://etherscan.io/address/0x3ee41c098f9666ed2ea246f4d2558010e59d63a0). Updates once an hour.
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-vaults-addresses/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /vaults/all:
    get:
      tags:
        - Vaults
      summary: Gets all vaults (all versions) from the vault registry
      description: |
        V1 vaults are pulled from the vault registry (https://etherscan.io/address/0x3ee41c098f9666ed2ea246f4d2558010e59d63a0). V2 vaults are pulled from thegraph (https://api.thegraph.com/subgraphs/name/salazarguille/yearn-vaults-v2-subgraph-rinkeby).
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-vaults-all/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /vaults/apy:
    get:
      tags:
        - Vaults
      summary: Gets APY for all vaults
      description: |
        Vault APY is calculated based on the following document: https://hackmd.io/BQChrnqRQ3-HHx-0oZZZug?view
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-vaults-apy/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /vaults/holdings:
    get:
      tags:
        - Vaults
      summary: 'Gets holdings for all V1 Vaults, Earn products, YFI staked in governance and veCRV.'
      description: |
        Vault holdings is calculated based on strategy + vault holdings per vault.
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-vaults-holdings/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /vaults/snapshots:
    get:
      tags:
        - Vaults
      summary: Gets current snapshots of all vaults from the Yearn subgraph
      description: |
        Currently the subgraph is indexing 8 out of 11 vaults. More vaults to be added later.
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-vaults-snapshots/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /vaults/v2:
    get:
      tags:
        - Vaults
      summary: Gets current v2 vaults from the Yearn subgraph v2
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-vaults-v2/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /yearn/repos:
    get:
      tags:
        - Yearn
      summary: Gets list of all Yearn repos and contributors
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-yearn-repos/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /yearn/repos/contributors:
    get:
      tags:
        - Yearn
      summary: Gets list of all Yearn contributors
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-yearn-repos-contributors/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
  /yearn/repos/statistics:
    get:
      tags:
        - Yearn
      summary: Gets basic Yearn repo statistics
      responses: {}
      x-amazon-apigateway-integration:
        uri: 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:698083237070:function:yearn-prod-yearn-repos-statistics/invocations'
        httpMethod: POST
        passthroughBehavior: when_no_match
        type: aws_proxy
    options:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |-
                #set($origin = $input.params("Origin"))
                #if($origin == "") #set($origin = $input.params("origin")) #end
                #if($origin.matches(".+")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end
        requestTemplates:
          application/json: '{statusCode:200}'
        passthroughBehavior: when_no_match
        contentHandling: CONVERT_TO_TEXT
        type: mock
